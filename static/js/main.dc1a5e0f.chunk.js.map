{"version":3,"sources":["components/NumberDisplay/index.js","components/utils/generateCells.js","components/Button/index.js","components/App/index.js","constants/index.js","serviceWorker.js","index.js"],"names":["NumberDisplay","value","className","Math","abs","toString","padStart","generateCells","cells","row","push","col","bomb","state","i","placedBomb","floor","random","cell","counter","Button","onClick","onContext","red","onContextMenu","role","aria-label","displayContent","App","useState","setCells","face","setFace","time","setTime","isLive","setIsLive","mineCounter","setMineCounter","hasLost","setHasLost","hasWon","setHasWon","useEffect","interval","setInterval","clearInterval","handleMouseDown","e","handleMouseUp","window","addEventListener","removeEventListener","newCells","map","renderButtonsForRow","rowIndex","colIndex","key","handleButtonClick","handleButtonContextClick","rowParam","colParam","preventDefault","isABomb","currentCell","showAllBombs","openMultipleCells","console","log","slice","topLeftCell","topCell","topRightCell","MAX_COLS","leftCell","rightCell","bottomLeftCell","MAX_ROWS","bottomCell","bottomRightCell","grabAllAdjacentCells","safeCellsExists","currentCells","Boolean","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dc1a5e0f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport  \"./NumberDisplay.css\"\r\n\r\nconst NumberDisplay = ({value}) =>{\r\n    return(\r\n        <div className=\"NumberDisplay\">\r\n            {\r\n                value<0\r\n                ?`-${Math.abs(value)\r\n                        .toString()\r\n                        .padStart(2, \"0\")}`\r\n                :value.toString().padStart(3,\"0\")\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NumberDisplay;","import { MAX_COLS, MAX_ROWS, NO_OF_BOMBS } from \"../../constants\";\r\nconst grabAllAdjacentCells = (cells, rowParam, colParam)=>{\r\n    const topLeftCell = rowParam>0&&colParam? cells[rowParam-1][colParam-1]:null\r\n    const topCell = rowParam?cells[rowParam-1][colParam]:null\r\n    const topRightCell = rowParam>0&&colParam<MAX_COLS-1 ? cells[rowParam-1][colParam+1]:null\r\n    const leftCell = colParam>0?cells[rowParam][colParam-1]:null\r\n    const rightCell = colParam<MAX_COLS-1 ? cells[rowParam][colParam+1]:null\r\n    const bottomLeftCell = rowParam < MAX_ROWS - 1 && colParam > 0\r\n        ? cells[rowParam + 1][colParam - 1]\r\n        : null\r\n    const bottomCell = rowParam<MAX_ROWS-1 ? cells[rowParam+1][colParam]:null\r\n    const bottomRightCell = rowParam<MAX_ROWS-1&&colParam<MAX_COLS-1 ? cells[rowParam+1][colParam+1]:null\r\n    return {\r\n        topLeftCell,\r\n        topCell,\r\n        topRightCell,\r\n        leftCell,\r\n        rightCell,\r\n        bottomLeftCell,\r\n        bottomCell,\r\n        bottomRightCell\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const generateCells = () => {\r\n    // creating the cells;\r\n    const cells = [];\r\n    for (let row = 0; row < 9; row++) {\r\n        cells.push([]);\r\n        for (let col = 0; col < 9; col++) {\r\n            cells[row].push({bomb: false, state: 0}); // 0 = unpressed, 1 = visible, 2 = flag\r\n        }\r\n    }\r\n    // randomly put 10 bombs\r\n    for(let i = 0;i<10;i++){\r\n        let placedBomb = false\r\n        while(!placedBomb){\r\n            let row = Math.floor(Math.random()*9);\r\n            let col = Math.floor(Math.random()*9);\r\n\r\n            if(!cells[row][col].bomb){\r\n                cells[row][col].bomb = true;\r\n                placedBomb = true;\r\n            }\r\n        }\r\n    }\r\n    //calculate value of each cell\r\n    for(let row =0;row<9;row++){\r\n        for(let col=0;col<9;col++){\r\n            const cell = cells[row][col]\r\n            if(cell.bomb){\r\n                cell.value = -1\r\n                continue\r\n            }\r\n            //compute value\r\n            let counter =0\r\n\r\n            if (row > 0 && col > 0 && cells[row - 1][col - 1].bomb) {\r\n                counter++;\r\n            }\r\n\r\n            if (row > 0 && cells[row - 1][col].bomb) {\r\n                counter++;\r\n            }\r\n\r\n            if (row > 0 && col < 8 && cells[row - 1][col + 1].bomb) {\r\n                counter++;\r\n            }\r\n            if (col > 0 && cells[row][col - 1].bomb) {\r\n                counter++;\r\n            }\r\n            if (col < 8 && cells[row][col + 1].bomb) {\r\n                counter++;\r\n            }\r\n            if (row < 8 && col > 0 && cells[row + 1][col - 1].bomb) {\r\n                counter++;\r\n            }\r\n            if (row < 8 && cells[row + 1][col].bomb) {\r\n                counter++;\r\n            }\r\n            if (row < 8 && col < 8 && cells[row + 1][col + 1].bomb) {\r\n                counter++;\r\n            }\r\n            cell.value = counter\r\n        }\r\n    }\r\n    return cells;\r\n}\r\n\r\nexport const openMultipleCells = (cells, rowParam, colParam)=> {\r\n    // const currentCell = cells[rowParam][colParam]\r\n    // console.log(cells)\r\n    console.log(colParam)\r\n    if(cells[rowParam][colParam].state === 1||cells[rowParam][colParam].state===2){\r\n        return cells\r\n    }\r\n    let newCells = cells.slice()\r\n    newCells[rowParam][colParam].state = 1\r\n    // console.log(rowParam)\r\n    // console.log(colParam)\r\n    // console.log(newCells)\r\n    const{\r\n        topLeftCell,\r\n        topCell,\r\n        topRightCell,\r\n        leftCell,\r\n        rightCell,\r\n        bottomLeftCell,\r\n        bottomCell,\r\n        bottomRightCell\r\n    } = grabAllAdjacentCells(cells, rowParam, colParam)\r\n\r\n    if(topLeftCell?.state===0 && topLeftCell.value !== -1){\r\n        if(topLeftCell.value === 0){\r\n            newCells = openMultipleCells(newCells, rowParam-1,colParam-1)\r\n        } else {\r\n            newCells[rowParam-1][colParam-1].state = 1\r\n        }\r\n    }\r\n    //topCell\r\n    if(topCell?.state===0 && topCell.value !== -1){\r\n        if(topCell.value === 0){\r\n            newCells = openMultipleCells(newCells, rowParam-1,colParam)\r\n        } else {\r\n            newCells[rowParam-1][colParam].state = 1\r\n        }\r\n    }\r\n    //topRightCell\r\n    if(topRightCell?.state===0 && topRightCell.value !== -1){\r\n        if(topRightCell.value === 0){\r\n            newCells = openMultipleCells(newCells, rowParam-1,colParam+1)\r\n        } else {\r\n            newCells[rowParam-1][colParam+1].state = 1\r\n        }\r\n    }\r\n    //leftCell\r\n    if(leftCell?.state===0 && leftCell.value !== -1){\r\n        if(leftCell.value === 0){\r\n            newCells = openMultipleCells(newCells, rowParam,colParam-1)\r\n        } else {\r\n            newCells[rowParam][colParam-1].state = 1\r\n        }\r\n    }\r\n    //rightCell\r\n    if(rightCell?.state===0 && rightCell.value !== -1){\r\n        if(rightCell.value === 0){\r\n            newCells = openMultipleCells(newCells, rowParam,colParam+1)\r\n        } else {\r\n            newCells[rowParam][colParam+1].state = 1\r\n        }\r\n    }\r\n    // bottomLeftCell\r\n    if(bottomLeftCell?.state===0 && bottomLeftCell.value !== -1){\r\n        if(bottomLeftCell.value === 0){\r\n            newCells = openMultipleCells(newCells, rowParam+1,colParam-1)\r\n        } else {\r\n            newCells[rowParam+1][colParam-1].state = 1\r\n        }\r\n    }\r\n    // bottomCell\r\n    if(bottomCell?.state===0 && bottomCell.value !== -1){\r\n        if(bottomCell.value === 0){\r\n            newCells = openMultipleCells(newCells, rowParam+1,colParam)\r\n        } else {\r\n            newCells[rowParam+1][colParam].state = 1\r\n        }\r\n    }\r\n    // bottomRightCell\r\n    if(bottomRightCell?.state===0 && bottomRightCell.value !== -1){\r\n        if(bottomRightCell.value === 0){\r\n            newCells = openMultipleCells(newCells, rowParam+1,colParam+1)\r\n        } else {\r\n            newCells[rowParam+1][colParam+1].state = 1\r\n        }\r\n    }\r\n    return newCells\r\n}\r\n","import React from \"react\";\r\nimport \"./Button.css\"\r\n\r\nconst   Button= ({onClick,onContext, row, col, state, value, red})=> {\r\n    const displayContent = () => {\r\n        if(state === 2) {\r\n            return <span role=\"img\" aria-label=\"flag\">🚩</span>\r\n        }\r\n        if(state === 1) {\r\n            if(value ===-1){\r\n                return <span role=\"img\" aria-label=\"bomb\">💣</span>\r\n            }\r\n            else if (value > 0){\r\n                return value\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    return(\r\n        <div\r\n            className={`Button value-${value} ${state ===1?\"visible\":\"\"} ${\r\n                red ? \"red\" : \"\"\r\n            }`}\r\n            onClick = {onClick(row, col)}\r\n            onContextMenu ={onContext(row,col)}\r\n        >\r\n            {displayContent()}\r\n        </div>\r\n    )\r\n\r\n\r\n\r\n}\r\n\r\nexport default Button;","import React, {useEffect, useState} from 'react';\r\n\r\n\r\nimport \"./App.css\";\r\nimport NumberDisplay from \"../NumberDisplay\";\r\nimport {generateCells} from \"../utils/generateCells\"\r\nimport {openMultipleCells} from \"../utils/generateCells\"\r\nimport Button from \"../Button\";\r\nimport {MAX_COLS, MAX_ROWS} from \"../../constants\";\r\n\r\nconst App = () => {\r\n    const [cells,setCells] = useState(generateCells());\r\n    const [face,setFace] = useState(\"😄\")\r\n    const [time, setTime] = useState(0)\r\n    const [isLive, setIsLive] = useState(false)\r\n    const [mineCounter, setMineCounter] = useState(10)\r\n    const [hasLost, setHasLost] = useState(false)\r\n    const [hasWon, setHasWon] = useState(false)\r\n\r\n    useEffect(()=> {\r\n        if(isLive && !hasWon && !hasLost){\r\n\r\n            const interval = setInterval(()=> {\r\n                if(time < 999){\r\n                    //console.log(\"Time\",time)\r\n                    setTime(time+1)\r\n                }\r\n            }, 1000)\r\n\r\n            return ()=> {\r\n                clearInterval(interval)\r\n            }\r\n        }\r\n    },[isLive,time, hasWon, hasLost])\r\n\r\n    const handleMouseDown = e => {\r\n        if (hasWon || hasLost) {\r\n            return;\r\n        }\r\n        setFace(\"😮\")\r\n    }\r\n    const handleMouseUp = ():void => {\r\n        if (hasWon || hasLost) {\r\n            return;\r\n        }\r\n        setFace(\"😄\")\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        window.addEventListener(\"mousedown\", handleMouseDown)\r\n        window.addEventListener(\"mouseup\",handleMouseUp)\r\n\r\n        return () => {\r\n            window.removeEventListener(\"mousedown\", handleMouseDown)\r\n            window.removeEventListener(\"mouseup\", handleMouseUp)\r\n        }\r\n    },[face, hasWon, hasLost])\r\n\r\n    useEffect(()=> {\r\n        if (hasLost){\r\n            setIsLive(false)\r\n            setFace(\"😵\")\r\n        }\r\n    },[hasLost])\r\n\r\n    useEffect(() => {\r\n        if(hasWon) {\r\n            setIsLive(false)  //TODO whether should add\r\n            const newCells = cells.map(row =>\r\n                row.map(cell =>\r\n                    cell.value === -1 //\r\n                        ? {\r\n                            ...cell,\r\n                            state: 1    //if bomb, make bomb visible\r\n                        }\r\n                        : cell\r\n                )\r\n            );\r\n\r\n            setCells(newCells);\r\n            setFace(\"😎\")\r\n        }\r\n    },[hasWon])\r\n\r\n    const renderCells = () => {\r\n        return cells.map((row, rowIndex) => {\r\n            return renderButtonsForRow(row, rowIndex);\r\n        });\r\n    };\r\n\r\n\r\n    const renderButtonsForRow = (row, rowIndex) => {\r\n        return row.map((cell, colIndex) => (\r\n            <Button\r\n                state={cell.state}\r\n                value={cell.value}\r\n                red={cell.red}\r\n                key={`${rowIndex}-${colIndex}`}\r\n                onClick={handleButtonClick}\r\n                onContext={handleButtonContextClick}\r\n                row={rowIndex}\r\n                col={colIndex}\r\n            />\r\n        ));\r\n    };\r\n\r\n\r\n    //left click\r\n    const handleButtonClick = (rowParam, colParam) => e => {\r\n        e.preventDefault()\r\n\r\n        if (hasWon || hasLost) {\r\n            return;\r\n        }\r\n\r\n        let newCells = cells;\r\n        let cell = newCells[rowParam][colParam];\r\n        //console.log(cells)\r\n        if(!isLive){\r\n            //TODO: make sure you don't click a bomb in the first click\r\n            let isABomb=(cell.value ===-1)\r\n\r\n            while(isABomb){\r\n                newCells = generateCells()\r\n                if(cell.value!==-1){\r\n                    isABomb =false\r\n                }\r\n            }\r\n            setIsLive(true)\r\n        }\r\n\r\n        const currentCell = newCells[rowParam][colParam]\r\n        if(currentCell.state !== 0){\r\n            return\r\n        }\r\n        if(currentCell.value === -1){\r\n            //TODO: what happen bomb click\r\n            setHasLost(true)\r\n            newCells[rowParam][colParam].red = true\r\n            newCells = showAllBombs(newCells)\r\n            setCells(newCells)\r\n        } else if(currentCell.value === 0){\r\n            //TODO\r\n            newCells = openMultipleCells(newCells, rowParam, colParam)\r\n            setCells(newCells)\r\n        }else{\r\n            newCells[rowParam][colParam].state = 1\r\n            setCells(newCells)\r\n        }\r\n        //TODO check to see if hasWon\r\n        let safeCellsExists = false\r\n        for (let row=0; row<MAX_ROWS; row++){\r\n            for(let col = 0; col <MAX_COLS;col++){\r\n                const currentCell = newCells[row][col]\r\n                if(currentCell.value!==-1 && currentCell.state===0){\r\n                    safeCellsExists = true\r\n                }\r\n            }\r\n        }\r\n        // if there is no safecell, flag all the left one\r\n        if(!safeCellsExists){\r\n            newCells = newCells.map(row => row.map(cell => {\r\n                if(cell.value === -1){\r\n                    return {\r\n                        ...cell,\r\n                        state: 2\r\n                    }\r\n                }\r\n                return cell\r\n            }))\r\n            setHasWon(true)\r\n        }\r\n        setCells(newCells)\r\n    }\r\n    //right click\r\n    const handleButtonContextClick = (rowParam:number, colParam:number) => e=> {\r\n        e.preventDefault()\r\n        //console.log(\"we are in right click\")\r\n        if(!isLive){\r\n            return\r\n        }\r\n        const currentCells = cells.slice()\r\n        const currentCell = cells[rowParam][colParam]\r\n        // console.log(currentCell)\r\n        // console.log(currentCells)\r\n        if(currentCell.state === 1){\r\n            return\r\n        } else if(currentCell.state ===0) {\r\n            currentCells[rowParam][colParam].state = 2\r\n            setCells(currentCells)\r\n            setMineCounter(mineCounter-1)\r\n        } else if(currentCell.state ===2){\r\n            currentCells[rowParam][colParam].state = 0\r\n            setCells(currentCells)\r\n            setMineCounter(mineCounter+1)\r\n        }\r\n    }\r\n    const handleFaceClick = e => {\r\n        e.preventDefault();\r\n        setCells(generateCells());\r\n        setIsLive(false);\r\n        setMineCounter(10);\r\n        setTime(0);\r\n        setHasLost(false);\r\n        setHasWon(false);\r\n        setFace(\"😁\");\r\n    }\r\n\r\n    const showAllBombs = (cells)=>{\r\n        return cells.map(row =>\r\n            row.map(cell => {\r\n                if (cell.value === -1){\r\n                    return {\r\n                        ...cell,\r\n                        state: 1\r\n                    }\r\n                }\r\n            return cell\r\n        }))\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"Header\">\r\n                <NumberDisplay value ={mineCounter}/>\r\n                <div className=\"Face\" onClick={handleFaceClick}>\r\n                    <span role=\"img\" aria-label=\"face\">{face}</span>\r\n                </div>\r\n                <NumberDisplay value={time}/>\r\n\r\n\r\n            </div>\r\n            <div className=\"Body\">\r\n                {renderCells()}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","export const MAX_ROWS = 9;\r\nexport const MAX_COLS = 9;\r\nexport const NO_OF_BOMBS = 10;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./components/App\";\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( <App />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}