{"version":3,"sources":["components/NumberDisplay/index.js","components/utils/generateCells.js","components/utils/setCellProp.js","components/Button/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["NumberDisplay","value","className","Math","abs","toString","padStart","generateCells","cells","row","push","col","bomb","state","i","placedBomb","floor","random","cell","counter","setCellProp","rowParam","colParam","property","map","rowIndex","colIndex","Button","onClick","onContext","red","onContextMenu","role","aria-label","displayContent","App","useState","setCells","face","setFace","time","setTime","isLive","setIsLive","mineCounter","setMineCounter","hasLost","setHasLost","hasWon","setHasWon","useEffect","interval","setInterval","clearInterval","handleMouseDown","e","handleMouseUp","window","addEventListener","removeEventListener","newCells","renderButtonsForRow","key","handleButtonClick","handleButtonContextClick","preventDefault","gameCells","hasABomb","currentCell","showAllBombs","openMultipleCells","console","log","slice","topLeftCell","topCell","topRightCell","MAX_COLS","leftCell","rightCell","bottomLeftCell","MAX_ROWS","bottomCell","bottomRightCell","grabAllAdjacentCells","availableNonBombSpaces","reduce","acc","acc2","currentCells","Boolean","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1ec8c340.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport  \"./NumberDisplay.css\"\r\n\r\nconst NumberDisplay = ({value}) =>{\r\n    return(\r\n        <div className=\"NumberDisplay\">\r\n            {\r\n                value<0\r\n                ?`-${Math.abs(value)\r\n                        .toString()\r\n                        .padStart(2, \"0\")}`\r\n                :value.toString().padStart(3,\"0\")\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NumberDisplay;","import { MAX_COLS, MAX_ROWS, NO_OF_BOMBS } from \"../../constants\";\r\nconst grabAllAdjacentCells = (cells, rowParam, colParam)=>{\r\n    const topLeftCell = rowParam>0&&colParam? cells[rowParam-1][colParam-1]:null\r\n    const topCell = rowParam?cells[rowParam-1][colParam]:null\r\n    const topRightCell = rowParam>0&&colParam<MAX_COLS-1 ? cells[rowParam-1][colParam+1]:null\r\n    const leftCell = colParam>0?cells[rowParam][colParam-1]:null\r\n    const rightCell = colParam<MAX_COLS-1 ? cells[rowParam][colParam+1]:null\r\n    const bottomLeftCell = rowParam < MAX_ROWS - 1 && colParam > 0\r\n        ? cells[rowParam + 1][colParam - 1]\r\n        : null\r\n    const bottomCell = rowParam<MAX_ROWS-1 ? cells[rowParam+1][colParam]:null\r\n    const bottomRightCell = rowParam<MAX_ROWS-1&&colParam<MAX_COLS-1 ? cells[rowParam+1][colParam+1]:null\r\n    return {\r\n        topLeftCell,\r\n        topCell,\r\n        topRightCell,\r\n        leftCell,\r\n        rightCell,\r\n        bottomLeftCell,\r\n        bottomCell,\r\n        bottomRightCell\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const generateCells = () => {\r\n    // creating the cells;\r\n    const cells = [];\r\n    for (let row = 0; row < 9; row++) {\r\n        cells.push([]);\r\n        for (let col = 0; col < 9; col++) {\r\n            cells[row].push({bomb: false, state: 0}); // 0 = unpressed, 1 = visible, 2 = flag\r\n        }\r\n    }\r\n    // randomly put 10 bombs\r\n    for(let i = 0;i<10;i++){\r\n        let placedBomb = false\r\n        while(!placedBomb){\r\n            let row = Math.floor(Math.random()*9);\r\n            let col = Math.floor(Math.random()*9);\r\n\r\n            if(!cells[row][col].bomb){\r\n                cells[row][col].bomb = true;\r\n                placedBomb = true;\r\n            }\r\n        }\r\n    }\r\n    //calculate value of each cell\r\n    for(let row =0;row<9;row++){\r\n        for(let col=0;col<9;col++){\r\n            const cell = cells[row][col]\r\n            if(cell.bomb){\r\n                cell.value = -1\r\n                continue\r\n            }\r\n            //compute value\r\n            let counter =0\r\n\r\n            if (row > 0 && col > 0 && cells[row - 1][col - 1].bomb) {\r\n                counter++;\r\n            }\r\n\r\n            if (row > 0 && cells[row - 1][col].bomb) {\r\n                counter++;\r\n            }\r\n\r\n            if (row > 0 && col < 8 && cells[row - 1][col + 1].bomb) {\r\n                counter++;\r\n            }\r\n            if (col > 0 && cells[row][col - 1].bomb) {\r\n                counter++;\r\n            }\r\n            if (col < 8 && cells[row][col + 1].bomb) {\r\n                counter++;\r\n            }\r\n            if (row < 8 && col > 0 && cells[row + 1][col - 1].bomb) {\r\n                counter++;\r\n            }\r\n            if (row < 8 && cells[row + 1][col].bomb) {\r\n                counter++;\r\n            }\r\n            if (row < 8 && col < 8 && cells[row + 1][col + 1].bomb) {\r\n                counter++;\r\n            }\r\n            cell.value = counter\r\n        }\r\n    }\r\n    return cells;\r\n}\r\n\r\nexport const openMultipleCells = (cells, rowParam, colParam)=> {\r\n    // const currentCell = cells[rowParam][colParam]\r\n    // console.log(cells)\r\n    console.log(colParam)\r\n    if(cells[rowParam][colParam].state === 1||cells[rowParam][colParam].state===2){\r\n        return cells\r\n    }\r\n    let newCells = cells.slice()\r\n    newCells[rowParam][colParam].state = 1\r\n    // console.log(rowParam)\r\n    // console.log(colParam)\r\n    // console.log(newCells)\r\n    const{\r\n        topLeftCell,\r\n        topCell,\r\n        topRightCell,\r\n        leftCell,\r\n        rightCell,\r\n        bottomLeftCell,\r\n        bottomCell,\r\n        bottomRightCell\r\n    } = grabAllAdjacentCells(cells, rowParam, colParam)\r\n\r\n    if(topLeftCell?.state===0 && topLeftCell.value !== -1){\r\n        if(topLeftCell.value === 0){\r\n            newCells = openMultipleCells(newCells, rowParam-1,colParam-1)\r\n        } else {\r\n            newCells[rowParam-1][colParam-1].state = 1\r\n        }\r\n    }\r\n    //topCell\r\n    if(topCell?.state===0 && topCell.value !== -1){\r\n        if(topCell.value === 0){\r\n            newCells = openMultipleCells(newCells, rowParam-1,colParam)\r\n        } else {\r\n            newCells[rowParam-1][colParam].state = 1\r\n        }\r\n    }\r\n    //topRightCell\r\n    if(topRightCell?.state===0 && topRightCell.value !== -1){\r\n        if(topRightCell.value === 0){\r\n            newCells = openMultipleCells(newCells, rowParam-1,colParam+1)\r\n        } else {\r\n            newCells[rowParam-1][colParam+1].state = 1\r\n        }\r\n    }\r\n    //leftCell\r\n    if(leftCell?.state===0 && leftCell.value !== -1){\r\n        if(leftCell.value === 0){\r\n            newCells = openMultipleCells(newCells, rowParam,colParam-1)\r\n        } else {\r\n            newCells[rowParam][colParam-1].state = 1\r\n        }\r\n    }\r\n    //rightCell\r\n    if(rightCell?.state===0 && rightCell.value !== -1){\r\n        if(rightCell.value === 0){\r\n            newCells = openMultipleCells(newCells, rowParam,colParam+1)\r\n        } else {\r\n            newCells[rowParam][colParam+1].state = 1\r\n        }\r\n    }\r\n    // bottomLeftCell\r\n    if(bottomLeftCell?.state===0 && bottomLeftCell.value !== -1){\r\n        if(bottomLeftCell.value === 0){\r\n            newCells = openMultipleCells(newCells, rowParam+1,colParam-1)\r\n        } else {\r\n            newCells[rowParam+1][colParam-1].state = 1\r\n        }\r\n    }\r\n    // bottomCell\r\n    if(bottomCell?.state===0 && bottomCell.value !== -1){\r\n        if(bottomCell.value === 0){\r\n            newCells = openMultipleCells(newCells, rowParam+1,colParam)\r\n        } else {\r\n            newCells[rowParam+1][colParam].state = 1\r\n        }\r\n    }\r\n    // bottomRightCell\r\n    if(bottomRightCell?.state===0 && bottomRightCell.value !== -1){\r\n        if(bottomRightCell.value === 0){\r\n            newCells = openMultipleCells(newCells, rowParam+1,colParam+1)\r\n        } else {\r\n            newCells[rowParam+1][colParam+1].state = 1\r\n        }\r\n    }\r\n    return newCells\r\n}\r\n","export const setCellProp = (cells, rowParam, colParam, property, value) => {\r\n  return cells.map((row, rowIndex) =>\r\n    row.map((cell, colIndex) => {\r\n      if (rowParam === rowIndex && colParam === colIndex) {\r\n        return {\r\n          ...cell,\r\n          [property]: value\r\n        };\r\n      }\r\n      return cell;\r\n    })\r\n  );\r\n};\r\n\r\nexport default setCellProp;\r\n","import React from \"react\";\r\nimport \"./Button.css\"\r\n\r\nconst   Button= ({onClick,onContext, row, col, state, value, red})=> {\r\n    const displayContent = () => {\r\n        if(state === 2) {\r\n            return <span role=\"img\" aria-label=\"flag\">🚩</span>\r\n        }\r\n        if(state === 1) {\r\n            if(value ===-1){\r\n                return <span role=\"img\" aria-label=\"bomb\">💣</span>\r\n            }\r\n            else if (value > 0){\r\n                return value\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    return(\r\n        <div\r\n            className={`Button value-${value} ${state ===1?\"visible\":\"\"} ${\r\n                red ? \"red\" : \"\"\r\n            }`}\r\n            onClick = {onClick(row, col)}\r\n            onContextMenu ={onContext(row,col)}\r\n        >\r\n            {displayContent()}\r\n        </div>\r\n    )\r\n\r\n\r\n\r\n}\r\n\r\nexport default Button;","import React, {useEffect, useState} from 'react';\r\n\r\n\r\nimport \"./App.css\";\r\nimport NumberDisplay from \"../NumberDisplay\";\r\nimport {generateCells} from \"../utils/generateCells\"\r\nimport {openMultipleCells} from \"../utils/generateCells\"\r\nimport {setCellProp} from \"../utils/setCellProp\"\r\nimport Button from \"../Button\";\r\nimport {MAX_COLS, MAX_ROWS} from \"../../constants\";\r\n\r\nconst App = () => {\r\n    const [cells,setCells] = useState(generateCells());\r\n    const [face,setFace] = useState(\"😄\")\r\n    const [time, setTime] = useState(0)\r\n    const [isLive, setIsLive] = useState(false)\r\n    const [mineCounter, setMineCounter] = useState(10)\r\n    const [hasLost, setHasLost] = useState(false)\r\n    const [hasWon, setHasWon] = useState(false)\r\n\r\n    useEffect(()=> {\r\n        if(isLive && !hasWon && !hasLost){\r\n\r\n            const interval = setInterval(()=> {\r\n                if(time < 999){\r\n                    //console.log(\"Time\",time)\r\n                    setTime(time+1)\r\n                }\r\n            }, 1000)\r\n\r\n            return ()=> {\r\n                clearInterval(interval)\r\n            }\r\n        }\r\n    },[isLive,time, hasWon, hasLost])\r\n\r\n    const handleMouseDown = e => {\r\n        if (hasWon || hasLost) {\r\n            return;\r\n        }\r\n        setFace(\"😮\")\r\n    }\r\n    const handleMouseUp = ():void => {\r\n        if (hasWon || hasLost) {\r\n            return;\r\n        }\r\n        setFace(\"😄\")\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        window.addEventListener(\"mousedown\", handleMouseDown)\r\n        window.addEventListener(\"mouseup\",handleMouseUp)\r\n\r\n        return () => {\r\n            window.removeEventListener(\"mousedown\", handleMouseDown)\r\n            window.removeEventListener(\"mouseup\", handleMouseUp)\r\n        }\r\n    },[face, hasWon, hasLost])\r\n\r\n    useEffect(()=> {\r\n        if (hasLost){\r\n            setIsLive(false)\r\n            setFace(\"😵\")\r\n        }\r\n    },[hasLost])\r\n\r\n    useEffect(() => {\r\n        if(hasWon) {\r\n            setIsLive(false)  //TODO whether should add\r\n            const newCells = cells.map(row =>\r\n                row.map(cell =>\r\n                    cell.value === -1 //\r\n                        ? {\r\n                            ...cell,\r\n                            state: 1    //if bomb, make bomb visible\r\n                        }\r\n                        : cell\r\n                )\r\n            );\r\n\r\n            setCells(newCells);\r\n            setFace(\"😎\")\r\n        }\r\n    },[hasWon])\r\n\r\n    const renderCells = () => {\r\n        return cells.map((row, rowIndex) => {\r\n            return renderButtonsForRow(row, rowIndex);\r\n        });\r\n    };\r\n\r\n\r\n    const renderButtonsForRow = (row, rowIndex) => {\r\n        return row.map((cell, colIndex) => (\r\n            <Button\r\n                state={cell.state}\r\n                value={cell.value}\r\n                red={cell.red}\r\n                key={`${rowIndex}-${colIndex}`}\r\n                onClick={handleButtonClick}\r\n                onContext={handleButtonContextClick}\r\n                row={rowIndex}\r\n                col={colIndex}\r\n            />\r\n        ));\r\n    };\r\n\r\n\r\n    //left click\r\n    const handleButtonClick = (rowParam, colParam) => e => {\r\n        e.preventDefault()\r\n\r\n        if (hasWon || hasLost) {\r\n            return;\r\n        }\r\n\r\n        let gameCells = cells;\r\n        let cell = gameCells[rowParam][colParam];\r\n        //console.log(cells)\r\n        if(!isLive){\r\n            //TODO: make sure you don't click a bomb in the first click\r\n            if (cell.value === -1) {\r\n                let hasABomb = true;\r\n                let newCells = gameCells;\r\n                while (hasABomb) {\r\n                    newCells = generateCells();\r\n                    const newCell = newCells[rowParam][colParam];\r\n                    if (newCell.value !== -1) {    //why need to check -1\r\n                        hasABomb = false;\r\n                    }\r\n                }\r\n                gameCells = newCells;\r\n                cell = gameCells[rowParam][colParam];\r\n            }\r\n            setIsLive(true)\r\n        }\r\n\r\n        const currentCell = gameCells[rowParam][colParam]\r\n        if(currentCell.state !== 0){\r\n            return\r\n        }\r\n        if(currentCell.value === -1){\r\n            //TODO: what happen bomb click\r\n            setHasLost(true)\r\n            let newCells = setCellProp(gameCells, rowParam, colParam, \"red\", true);\r\n            newCells = showAllBombs(newCells)\r\n            setCells(newCells)\r\n            return\r\n        } else if(currentCell.value === 0){\r\n            //TODO\r\n            gameCells = openMultipleCells(gameCells, rowParam, colParam)\r\n        }else if (currentCell.value > 0){\r\n            gameCells = setCellProp(gameCells, rowParam, colParam, \"state\", 1);\r\n        }\r\n        //TODO check to see if hasWon\r\n        const availableNonBombSpaces = gameCells.reduce(\r\n            (acc, row) =>\r\n                acc +\r\n                row.reduce(\r\n                    (acc2, cell) =>\r\n                        cell.value !== -1 && cell.state === 0 ? acc2 + 1 : acc2,\r\n                    0\r\n                ),\r\n            0\r\n        );\r\n\r\n        setCells(gameCells);\r\n\r\n        if (availableNonBombSpaces === 0) {\r\n            gameCells.map(row => row.map(cell => ({ ...cell, state: 2 })));\r\n            setHasWon(true);\r\n        }\r\n    }\r\n    //right click\r\n    const handleButtonContextClick = (rowParam:number, colParam:number) => e=> {\r\n        e.preventDefault()\r\n        //console.log(\"we are in right click\")\r\n        if(!isLive){\r\n            return\r\n        }\r\n        const currentCells = cells.slice()\r\n        const currentCell = cells[rowParam][colParam]\r\n        // console.log(currentCell)\r\n        // console.log(currentCells)\r\n        if(currentCell.state === 1){\r\n            return\r\n        } else if(currentCell.state ===0) {\r\n            currentCells[rowParam][colParam].state = 2\r\n            setCells(currentCells)\r\n            setMineCounter(mineCounter-1)\r\n        } else if(currentCell.state ===2){\r\n            currentCells[rowParam][colParam].state = 0\r\n            setCells(currentCells)\r\n            setMineCounter(mineCounter+1)\r\n        }\r\n    }\r\n    const handleFaceClick = e => {\r\n        e.preventDefault();\r\n        setCells(generateCells());\r\n        setIsLive(false);\r\n        setMineCounter(10);\r\n        setTime(0);\r\n        setHasLost(false);\r\n        setHasWon(false);\r\n        setFace(\"😁\");\r\n    }\r\n\r\n    const showAllBombs = (cells)=>{\r\n        return cells.map(row =>\r\n            row.map(cell => {\r\n                if (cell.value === -1){\r\n                    return {\r\n                        ...cell,\r\n                        state: 1\r\n                    }\r\n                }\r\n            return cell\r\n        }))\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"Header\">\r\n                <NumberDisplay value ={mineCounter}/>\r\n                <div className=\"Face\" onClick={handleFaceClick}>\r\n                    <span role=\"img\" aria-label=\"face\">{face}</span>\r\n                </div>\r\n                <NumberDisplay value={time}/>\r\n\r\n\r\n            </div>\r\n            <div className=\"Body\">\r\n                {renderCells()}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./components/App\";\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( <App />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}